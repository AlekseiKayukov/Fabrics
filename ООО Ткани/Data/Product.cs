//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ООО_Ткани.Data
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Windows.Media;
    using System.Windows.Media.Imaging;

    public partial class Product
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Product()
        {
            this.Order = new HashSet<Order>();
        }
    
        public string Id { get; set; }
        public string Title { get; set; }
        public int UnitId { get; set; }
        public decimal Price { get; set; }
        public double MaxDiscount { get; set; }
        public int ManufacturerId { get; set; }
        public int SupplierId { get; set; }
        public int CategoryId { get; set; }
        public int CurrentDiscount { get; set; }
        public int CountWorkhouse { get; set; }
        public string Description { get; set; }
        public string PathImage { get; set; }
        public byte[] Image { get; set; }
        public string ManufacturerName
        {
            get { return "Производитель: " + Manufacturer.Manufacturer1; }
        }
        public string PriceProduct
        {
            get
            {
                return "Цена: " + String.Format("{0:0}", Price);
            }
        }
        public BitmapImage ImageProduct
        {
            get
            {
                if (File.Exists(Environment.CurrentDirectory + @"\Image\" + PathImage))
                    return new BitmapImage(new Uri(Environment.CurrentDirectory + @"\Image\" + PathImage, UriKind.Absolute));
                else
                    return new BitmapImage(new Uri(Environment.CurrentDirectory + @"\Image\" + "picture.png", UriKind.Absolute));
            }
        }
        public Brush BackGroundCountWorkhouse
        {
            get 
            { 
                if (CountWorkhouse == 0) 
                    return Brushes.LightGray;
                else
                    return Brushes.White;
            }
        }

        public string CountWorkhouseText
        {
            get
            {
                if (CountWorkhouse == 0)
                    return "Отсутствует";
                else
                    return $"Имеется\n({CountWorkhouse.ToString()})";
            }
        }
        public virtual Category Category { get; set; }
        public virtual Manufacturer Manufacturer { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Order> Order { get; set; }
        public virtual Supplier Supplier { get; set; }
        public virtual Unit Unit { get; set; }
    }
}
